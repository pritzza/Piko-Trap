Epilogue:
	This project was started as part of DVC's second anual hackathon "Viking Hacks".
The goal of this project is to create a 2D co-op puzzle platformer game inspried by
Piko Park and Trap Adventure 2. This was a 48 hour hackathon so our scope needed to be
well defined and relativley small. We were thinking of having the game be local co-op
(for lack of time but mainly knowledge on how to implement online multiplayer). Anyways,
we wanted our game to have a couple of the puzzle mechanics from Piko Park and maybe 5
screens/levels (spoiler doesn't happen).

Development Day 1 (est 6 hours) [4-29-21]:
	I started off by copy pasting the code from my Microcraft Rat game. I stripped out
and replace all of the outdated/extrenuous files like "Spritesheet"- files that didn't
make to exist in the scope of this project, or files that are old and I wanted to be
completally redone. I kept essential stuff like "Window" only adjusting what I needed
for the code to run without making any design descisions/implications.
	This took around an hour or so because I was getting alot of silly errors from
tearing the project's template apart. Then, I dont know why, I started importing newer
and "better" game engine files, like the GameStateMachine files as part of Fighting Game
(a project that didn't get far or uploaded on github), as well as the EventBus code. This
was a nightmare and took 4+ hours- in the end it didnt work and created a dependency hell.
I got a linker error which took over an hour to resolve and had something to do with a
data typed declearation vs definition which I still dont understand, but the error said
nothing about that. I am upset because I end the night having development I was hoping to
get a level editor working and spend the next day designing levels, but NOPE.

Development Day 2 (est 4 hours) [4-30-21]:
	I get the EventBus and Event mostly set up and almost working. I realize that I want
to use the EventBus working for all types of events from high to low level, from user input
to an in-game-event to an event causing an event (don't know if that made sense). Going with
this design decision and update the GameStates classes and GameStateMachine to use the EventBus
for changing game states using GameStateMachineOperationEvent, rather than just 
GameStateMachineOperation. I think I like this design, because now anywhere in the code, I can 
create a GameStateMachineOperationEvent and perform a game state machine operation, without 
needing to know what the GameMachine is, what a GameState is, or anything- the only depenency 
is knowing what a GameStateMachineOperation is, which is just a struct of 2 enum class values.
This brought me to a small issue. In my design so far, all the GameState classes had reference
to GameData, a struct that is meant to allow the states access to all of the resources and objects
the state could need to run, eg: the renderer to render, the state machine to change states, and
the event bus to publish events. However I hadn't made a GameData class yet. What I had done was
put all of these objects just as private data members of Game and left them there. So I made
the maybe stupid and lazy decision to have GameData store references to all the objects, rather
than actually store them. These references would come from the members of Game, and Game would a
single instance of GameData.
	Feeling good that the EventBus was working well, for some reason I decided to begin working
on entities (Entity class). I decided that I wanted Entity to store a position, velocity, sprite,
and collider. All while the collider class (AABB) had its own position, and the Sprite its own
position. That way the collider could be different from the sprite. After that, I wanted to take
advantage of the new EventBus system I'd never had before and create a PhysicsHandler class to
handle logic for physics events, like collision, rather than having the colliders or entities
contain such logic. I thought this was a good design decision because it makes things more modular
and less dependant (eg entity will have seperate logics from what happens during a collision of 
entities). This was unexpectedly difficult though. I thought I could just make the PhysicsHandler
class, write a test method for what I'd call a EntityCollisionEvent, and have the EventBus
subscribe my PhysicsHandler to all EntityCollisionEvents. Except there were dependency errors.
This left me with and annoying error and the difficult realization that because of how EventBus
was implemented in a header file with templates, as far as I know, declarations for the pointers
to objects and methods and events wouldn't suffice. So EventBus.h would need to #include EVERY
SINGLE EVENT I EVER WRITE. This struck fear in me with how awful this dependency hell could be
and that I need to think of a better solution.
	Eventually I got the collision event working, so I tried to implement Entity-Level collision
so I got to work on designing and writing a small level class- just a 2D array of tiles (enum class).
For some reason though I couldn't get the level's tiles to render correctly so I gave up.

Development Day 3 (est 2 hours) [5-6-21]:
	Had some time and motivation to come back and try to clean up the mess I made before. I went
through and tried to clean up the file dependencies. I refactored the DeltaTime class into Timer,
cleaned up some code here and there and reviewed my design decisions. I reworked Sprite to try
to make it simpler; Now instead of storing its own position, the SFML sprite's position is that
of what should be the Entity's position, passed in through Entity::update(Vec2f pos). I made this
decision to try to simplify the code, making the Entity class more responsible and in control of
what it decides to do with its sprite. Also while reworking/refactoring Sprite I fixed a bug 
that now has the level being rendered properly.
	I really need to figure out a way to prevent dependency hell with EventBus though, becuase
events can do anything, they could require any header, including EventBus. To have to #include
every event in EventBus could just be awful.
